// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IoT.proto
#ifndef GRPC_IoT_2eproto__INCLUDED
#define GRPC_IoT_2eproto__INCLUDED

#include "IoT.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {

class IoTService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.IoTService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Device
    virtual ::grpc::Status CreateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncCreateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncCreateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncCreateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncCreateDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncDeleteDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncDeleteDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncDeleteDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncDeleteDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Device* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Device>> AsyncGetDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Device>>(AsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Device>> PrepareAsyncGetDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Device>>(PrepareAsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Device>> GetDevices(::grpc::ClientContext* context, const ::proto::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Device>>(GetDevicesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Device>> AsyncGetDevices(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Device>>(AsyncGetDevicesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Device>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Device>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    // Sensor
    virtual ::grpc::Status CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncCreateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncCreateSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncCreateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncCreateSensorRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncUpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncUpdateSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncUpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncUpdateSensorRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncDeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncDeleteSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncDeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncDeleteSensorRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Sensor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Sensor>> AsyncGetSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Sensor>>(AsyncGetSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Sensor>> PrepareAsyncGetSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Sensor>>(PrepareAsyncGetSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Sensor>> GetSensors(::grpc::ClientContext* context, const ::proto::Device& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Sensor>>(GetSensorsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Sensor>> AsyncGetSensors(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Sensor>>(AsyncGetSensorsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Sensor>> PrepareAsyncGetSensors(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Sensor>>(PrepareAsyncGetSensorsRaw(context, request, cq));
    }
    // Record
    virtual ::grpc::Status CreateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncCreateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncCreateRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncCreateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncCreateRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncUpdateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncUpdateRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncUpdateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncUpdateRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncDeleteRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncDeleteRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncDeleteRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncDeleteRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Record* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Record>> AsyncGetRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Record>>(AsyncGetRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Record>> PrepareAsyncGetRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Record>>(PrepareAsyncGetRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Record>> GetRecords(::grpc::ClientContext* context, const ::proto::Device& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Record>>(GetRecordsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Record>> AsyncGetRecords(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Record>>(AsyncGetRecordsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Record>> PrepareAsyncGetRecords(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Record>>(PrepareAsyncGetRecordsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncCreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncCreateRecordDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncCreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncCreateRecordDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::RecordData>> GetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::RecordData>>(GetRecordDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::RecordData>> AsyncGetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::RecordData>>(AsyncGetRecordDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::RecordData>> PrepareAsyncGetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::RecordData>>(PrepareAsyncGetRecordDataRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> AsyncDeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(AsyncDeleteRecordDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>> PrepareAsyncDeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>>(PrepareAsyncDeleteRecordDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Device
      virtual void CreateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Device* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Device* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDevices(::grpc::ClientContext* context, const ::proto::Empty* request, ::grpc::ClientReadReactor< ::proto::Device>* reactor) = 0;
      // Sensor
      virtual void CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Sensor* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Sensor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSensors(::grpc::ClientContext* context, const ::proto::Device* request, ::grpc::ClientReadReactor< ::proto::Sensor>* reactor) = 0;
      // Record
      virtual void CreateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Record* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Record* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRecords(::grpc::ClientContext* context, const ::proto::Device* request, ::grpc::ClientReadReactor< ::proto::Record>* reactor) = 0;
      virtual void CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter* request, ::grpc::ClientReadReactor< ::proto::RecordData>* reactor) = 0;
      virtual void DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Device>* AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Device>* PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::Device>* GetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Device>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Device>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncCreateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncCreateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncUpdateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncUpdateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncDeleteSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncDeleteSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Sensor>* AsyncGetSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Sensor>* PrepareAsyncGetSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::Sensor>* GetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Sensor>* AsyncGetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Sensor>* PrepareAsyncGetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncCreateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncCreateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncUpdateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncUpdateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Record>* AsyncGetRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Record>* PrepareAsyncGetRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::Record>* GetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Record>* AsyncGetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Record>* PrepareAsyncGetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncCreateRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncCreateRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::RecordData>* GetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::RecordData>* AsyncGetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::RecordData>* PrepareAsyncGetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* AsyncDeleteRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Empty>* PrepareAsyncDeleteRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncCreateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncCreateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncCreateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncCreateDeviceRaw(context, request, cq));
    }
    ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    ::grpc::Status DeleteDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncDeleteDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncDeleteDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncDeleteDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncDeleteDeviceRaw(context, request, cq));
    }
    ::grpc::Status GetDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Device* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Device>> AsyncGetDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Device>>(AsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Device>> PrepareAsyncGetDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Device>>(PrepareAsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::Device>> GetDevices(::grpc::ClientContext* context, const ::proto::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::Device>>(GetDevicesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Device>> AsyncGetDevices(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Device>>(AsyncGetDevicesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Device>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Device>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    ::grpc::Status CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncCreateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncCreateSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncCreateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncCreateSensorRaw(context, request, cq));
    }
    ::grpc::Status UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncUpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncUpdateSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncUpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncUpdateSensorRaw(context, request, cq));
    }
    ::grpc::Status DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncDeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncDeleteSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncDeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncDeleteSensorRaw(context, request, cq));
    }
    ::grpc::Status GetSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Sensor* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Sensor>> AsyncGetSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Sensor>>(AsyncGetSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Sensor>> PrepareAsyncGetSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Sensor>>(PrepareAsyncGetSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::Sensor>> GetSensors(::grpc::ClientContext* context, const ::proto::Device& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::Sensor>>(GetSensorsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Sensor>> AsyncGetSensors(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Sensor>>(AsyncGetSensorsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Sensor>> PrepareAsyncGetSensors(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Sensor>>(PrepareAsyncGetSensorsRaw(context, request, cq));
    }
    ::grpc::Status CreateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncCreateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncCreateRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncCreateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncCreateRecordRaw(context, request, cq));
    }
    ::grpc::Status UpdateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncUpdateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncUpdateRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncUpdateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncUpdateRecordRaw(context, request, cq));
    }
    ::grpc::Status DeleteRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncDeleteRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncDeleteRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncDeleteRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncDeleteRecordRaw(context, request, cq));
    }
    ::grpc::Status GetRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Record* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Record>> AsyncGetRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Record>>(AsyncGetRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Record>> PrepareAsyncGetRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Record>>(PrepareAsyncGetRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::Record>> GetRecords(::grpc::ClientContext* context, const ::proto::Device& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::Record>>(GetRecordsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Record>> AsyncGetRecords(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Record>>(AsyncGetRecordsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Record>> PrepareAsyncGetRecords(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Record>>(PrepareAsyncGetRecordsRaw(context, request, cq));
    }
    ::grpc::Status CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncCreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncCreateRecordDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncCreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncCreateRecordDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::RecordData>> GetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::RecordData>>(GetRecordDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::RecordData>> AsyncGetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::RecordData>>(AsyncGetRecordDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::RecordData>> PrepareAsyncGetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::RecordData>>(PrepareAsyncGetRecordDataRaw(context, request, cq));
    }
    ::grpc::Status DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> AsyncDeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(AsyncDeleteRecordDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>> PrepareAsyncDeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Empty>>(PrepareAsyncDeleteRecordDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void CreateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Device* response, std::function<void(::grpc::Status)>) override;
      void GetDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Device* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDevices(::grpc::ClientContext* context, const ::proto::Empty* request, ::grpc::ClientReadReactor< ::proto::Device>* reactor) override;
      void CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Sensor* response, std::function<void(::grpc::Status)>) override;
      void GetSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Sensor* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSensors(::grpc::ClientContext* context, const ::proto::Device* request, ::grpc::ClientReadReactor< ::proto::Sensor>* reactor) override;
      void CreateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void CreateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Record* response, std::function<void(::grpc::Status)>) override;
      void GetRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Record* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRecords(::grpc::ClientContext* context, const ::proto::Device* request, ::grpc::ClientReadReactor< ::proto::Record>* reactor) override;
      void CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter* request, ::grpc::ClientReadReactor< ::proto::RecordData>* reactor) override;
      void DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Device>* AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Device>* PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::Device>* GetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request) override;
    ::grpc::ClientAsyncReader< ::proto::Device>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::Device>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncCreateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncCreateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncUpdateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncUpdateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncDeleteSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncDeleteSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Sensor>* AsyncGetSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Sensor>* PrepareAsyncGetSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::Sensor>* GetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request) override;
    ::grpc::ClientAsyncReader< ::proto::Sensor>* AsyncGetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::Sensor>* PrepareAsyncGetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncCreateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncCreateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncUpdateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncUpdateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Record>* AsyncGetRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Record>* PrepareAsyncGetRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::Record>* GetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request) override;
    ::grpc::ClientAsyncReader< ::proto::Record>* AsyncGetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::Record>* PrepareAsyncGetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncCreateRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncCreateRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::RecordData>* GetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request) override;
    ::grpc::ClientAsyncReader< ::proto::RecordData>* AsyncGetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::RecordData>* PrepareAsyncGetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* AsyncDeleteRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Empty>* PrepareAsyncDeleteRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSensor_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSensor_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSensor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSensor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSensors_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecords_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRecordData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecordData_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRecordData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Device
    virtual ::grpc::Status CreateDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Empty* response);
    virtual ::grpc::Status UpdateDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Empty* response);
    virtual ::grpc::Status DeleteDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Empty* response);
    virtual ::grpc::Status GetDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Device* response);
    virtual ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Device>* writer);
    // Sensor
    virtual ::grpc::Status CreateSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response);
    virtual ::grpc::Status UpdateSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response);
    virtual ::grpc::Status DeleteSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response);
    virtual ::grpc::Status GetSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Sensor* response);
    virtual ::grpc::Status GetSensors(::grpc::ServerContext* context, const ::proto::Device* request, ::grpc::ServerWriter< ::proto::Sensor>* writer);
    // Record
    virtual ::grpc::Status CreateRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Empty* response);
    virtual ::grpc::Status UpdateRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Empty* response);
    virtual ::grpc::Status DeleteRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Empty* response);
    virtual ::grpc::Status GetRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Record* response);
    virtual ::grpc::Status GetRecords(::grpc::ServerContext* context, const ::proto::Device* request, ::grpc::ServerWriter< ::proto::Record>* writer);
    virtual ::grpc::Status CreateRecordData(::grpc::ServerContext* context, const ::proto::RecordData* request, ::proto::Empty* response);
    virtual ::grpc::Status GetRecordData(::grpc::ServerContext* context, const ::proto::RecordDataFilter* request, ::grpc::ServerWriter< ::proto::RecordData>* writer);
    virtual ::grpc::Status DeleteRecordData(::grpc::ServerContext* context, const ::proto::RecordData* request, ::proto::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDevice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDevice(::grpc::ServerContext* context, ::proto::Device* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::proto::Device* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDevice(::grpc::ServerContext* context, ::proto::Device* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevice() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Device* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevice(::grpc::ServerContext* context, ::proto::Device* request, ::grpc::ServerAsyncResponseWriter< ::proto::Device>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevices() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::proto::Empty* /*request*/, ::grpc::ServerWriter< ::proto::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::proto::Empty* request, ::grpc::ServerAsyncWriter< ::proto::Device>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSensor() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSensor(::grpc::ServerContext* context, ::proto::Sensor* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSensor() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSensor(::grpc::ServerContext* context, ::proto::Sensor* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSensor() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSensor(::grpc::ServerContext* context, ::proto::Sensor* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSensor() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Sensor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSensor(::grpc::ServerContext* context, ::proto::Sensor* request, ::grpc::ServerAsyncResponseWriter< ::proto::Sensor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSensors() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensors(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Sensor>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSensors(::grpc::ServerContext* context, ::proto::Device* request, ::grpc::ServerAsyncWriter< ::proto::Sensor>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRecord() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CreateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRecord(::grpc::ServerContext* context, ::proto::Record* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRecord() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UpdateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRecord(::grpc::ServerContext* context, ::proto::Record* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecord(::grpc::ServerContext* context, ::proto::Record* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecord() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Record* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecord(::grpc::ServerContext* context, ::proto::Record* request, ::grpc::ServerAsyncResponseWriter< ::proto::Record>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecords() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecords(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Record>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecords(::grpc::ServerContext* context, ::proto::Device* request, ::grpc::ServerAsyncWriter< ::proto::Record>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRecordData() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_CreateRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRecordData(::grpc::ServerContext* context, ::proto::RecordData* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecordData() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordDataFilter* /*request*/, ::grpc::ServerWriter< ::proto::RecordData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordData(::grpc::ServerContext* context, ::proto::RecordDataFilter* request, ::grpc::ServerAsyncWriter< ::proto::RecordData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRecordData() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DeleteRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecordData(::grpc::ServerContext* context, ::proto::RecordData* request, ::grpc::ServerAsyncResponseWriter< ::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateDevice<WithAsyncMethod_UpdateDevice<WithAsyncMethod_DeleteDevice<WithAsyncMethod_GetDevice<WithAsyncMethod_GetDevices<WithAsyncMethod_CreateSensor<WithAsyncMethod_UpdateSensor<WithAsyncMethod_DeleteSensor<WithAsyncMethod_GetSensor<WithAsyncMethod_GetSensors<WithAsyncMethod_CreateRecord<WithAsyncMethod_UpdateRecord<WithAsyncMethod_DeleteRecord<WithAsyncMethod_GetRecord<WithAsyncMethod_GetRecords<WithAsyncMethod_CreateRecordData<WithAsyncMethod_GetRecordData<WithAsyncMethod_DeleteRecordData<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateDevice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Device* request, ::proto::Empty* response) { return this->CreateDevice(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDevice(
        ::grpc::MessageAllocator< ::proto::Device, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Device* request, ::proto::Empty* response) { return this->UpdateDevice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDevice(
        ::grpc::MessageAllocator< ::proto::Device, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Device* request, ::proto::Empty* response) { return this->DeleteDevice(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDevice(
        ::grpc::MessageAllocator< ::proto::Device, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDevice() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Device>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Device* request, ::proto::Device* response) { return this->GetDevice(context, request, response); }));}
    void SetMessageAllocatorFor_GetDevice(
        ::grpc::MessageAllocator< ::proto::Device, ::proto::Device>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Device, ::proto::Device>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Device* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Device* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDevices() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::proto::Empty, ::proto::Device>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Empty* request) { return this->GetDevices(context, request); }));
    }
    ~WithCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::proto::Empty* /*request*/, ::grpc::ServerWriter< ::proto::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::proto::Device>* GetDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSensor() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response) { return this->CreateSensor(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSensor(
        ::grpc::MessageAllocator< ::proto::Sensor, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSensor() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response) { return this->UpdateSensor(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSensor(
        ::grpc::MessageAllocator< ::proto::Sensor, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSensor() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response) { return this->DeleteSensor(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSensor(
        ::grpc::MessageAllocator< ::proto::Sensor, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSensor() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Sensor>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Sensor* request, ::proto::Sensor* response) { return this->GetSensor(context, request, response); }));}
    void SetMessageAllocatorFor_GetSensor(
        ::grpc::MessageAllocator< ::proto::Sensor, ::proto::Sensor>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Sensor, ::proto::Sensor>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Sensor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Sensor* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSensors() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::proto::Device, ::proto::Sensor>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Device* request) { return this->GetSensors(context, request); }));
    }
    ~WithCallbackMethod_GetSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensors(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Sensor>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::proto::Sensor>* GetSensors(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Device* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRecord() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Record* request, ::proto::Empty* response) { return this->CreateRecord(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRecord(
        ::grpc::MessageAllocator< ::proto::Record, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRecord() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Record* request, ::proto::Empty* response) { return this->UpdateRecord(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRecord(
        ::grpc::MessageAllocator< ::proto::Record, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Record* request, ::proto::Empty* response) { return this->DeleteRecord(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRecord(
        ::grpc::MessageAllocator< ::proto::Record, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRecord() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Record>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Record* request, ::proto::Record* response) { return this->GetRecord(context, request, response); }));}
    void SetMessageAllocatorFor_GetRecord(
        ::grpc::MessageAllocator< ::proto::Record, ::proto::Record>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Record, ::proto::Record>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Record* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Record* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRecords() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::proto::Device, ::proto::Record>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Device* request) { return this->GetRecords(context, request); }));
    }
    ~WithCallbackMethod_GetRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecords(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Record>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::proto::Record>* GetRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Device* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRecordData() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::RecordData, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::RecordData* request, ::proto::Empty* response) { return this->CreateRecordData(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRecordData(
        ::grpc::MessageAllocator< ::proto::RecordData, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::RecordData, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRecordData(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRecordData() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackServerStreamingHandler< ::proto::RecordDataFilter, ::proto::RecordData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::RecordDataFilter* request) { return this->GetRecordData(context, request); }));
    }
    ~WithCallbackMethod_GetRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordDataFilter* /*request*/, ::grpc::ServerWriter< ::proto::RecordData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::proto::RecordData>* GetRecordData(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::RecordDataFilter* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRecordData() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::RecordData, ::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::RecordData* request, ::proto::Empty* response) { return this->DeleteRecordData(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRecordData(
        ::grpc::MessageAllocator< ::proto::RecordData, ::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::RecordData, ::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRecordData(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateDevice<WithCallbackMethod_UpdateDevice<WithCallbackMethod_DeleteDevice<WithCallbackMethod_GetDevice<WithCallbackMethod_GetDevices<WithCallbackMethod_CreateSensor<WithCallbackMethod_UpdateSensor<WithCallbackMethod_DeleteSensor<WithCallbackMethod_GetSensor<WithCallbackMethod_GetSensors<WithCallbackMethod_CreateRecord<WithCallbackMethod_UpdateRecord<WithCallbackMethod_DeleteRecord<WithCallbackMethod_GetRecord<WithCallbackMethod_GetRecords<WithCallbackMethod_CreateRecordData<WithCallbackMethod_GetRecordData<WithCallbackMethod_DeleteRecordData<Service > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDevice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevice() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Device* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevices() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::proto::Empty* /*request*/, ::grpc::ServerWriter< ::proto::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSensor() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSensor() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSensor() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSensor() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Sensor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSensors() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensors(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Sensor>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRecord() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CreateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRecord() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UpdateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecord() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Record* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecords() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecords(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Record>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRecordData() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_CreateRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecordData() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordDataFilter* /*request*/, ::grpc::ServerWriter< ::proto::RecordData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRecordData() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DeleteRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDevice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevice() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Device* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevices() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::proto::Empty* /*request*/, ::grpc::ServerWriter< ::proto::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSensor() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSensor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSensor() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSensor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSensor() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSensor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSensor() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Sensor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSensor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSensors() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensors(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Sensor>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSensors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRecord() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CreateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRecord() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_UpdateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecord() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Record* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecords() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecords(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Record>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecords(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRecordData() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_CreateRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRecordData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecordData() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordDataFilter* /*request*/, ::grpc::ServerWriter< ::proto::RecordData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRecordData() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DeleteRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRecordData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateDevice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDevice() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Device* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDevices() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetDevices(context, request); }));
    }
    ~WithRawCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::proto::Empty* /*request*/, ::grpc::ServerWriter< ::proto::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSensor() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSensor(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSensor() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSensor(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSensor() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSensor(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSensor() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSensor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Sensor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSensor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSensors() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetSensors(context, request); }));
    }
    ~WithRawCallbackMethod_GetSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSensors(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Sensor>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetSensors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRecord() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRecord() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRecord() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Record* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRecords() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetRecords(context, request); }));
    }
    ~WithRawCallbackMethod_GetRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecords(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Record>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRecordData() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRecordData(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRecordData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRecordData() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetRecordData(context, request); }));
    }
    ~WithRawCallbackMethod_GetRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordDataFilter* /*request*/, ::grpc::ServerWriter< ::proto::RecordData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRecordData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRecordData() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRecordData(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRecordData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDevice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Device, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Device, ::proto::Empty>* streamer) {
                       return this->StreamedCreateDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Device,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Device, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Device, ::proto::Empty>* streamer) {
                       return this->StreamedUpdateDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Device,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Device, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Device, ::proto::Empty>* streamer) {
                       return this->StreamedDeleteDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Device,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDevice() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Device, ::proto::Device>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Device, ::proto::Device>* streamer) {
                       return this->StreamedGetDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::proto::Device* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Device,::proto::Device>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSensor() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Sensor, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Sensor, ::proto::Empty>* streamer) {
                       return this->StreamedCreateSensor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSensor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Sensor,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSensor() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Sensor, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Sensor, ::proto::Empty>* streamer) {
                       return this->StreamedUpdateSensor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSensor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Sensor,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSensor() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Sensor, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Sensor, ::proto::Empty>* streamer) {
                       return this->StreamedDeleteSensor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSensor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Sensor,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSensor() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Sensor, ::proto::Sensor>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Sensor, ::proto::Sensor>* streamer) {
                       return this->StreamedGetSensor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSensor(::grpc::ServerContext* /*context*/, const ::proto::Sensor* /*request*/, ::proto::Sensor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSensor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Sensor,::proto::Sensor>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRecord() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Record, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Record, ::proto::Empty>* streamer) {
                       return this->StreamedCreateRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Record,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRecord() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Record, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Record, ::proto::Empty>* streamer) {
                       return this->StreamedUpdateRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Record,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRecord() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Record, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Record, ::proto::Empty>* streamer) {
                       return this->StreamedDeleteRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Record,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRecord() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Record, ::proto::Record>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Record, ::proto::Record>* streamer) {
                       return this->StreamedGetRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRecord(::grpc::ServerContext* /*context*/, const ::proto::Record* /*request*/, ::proto::Record* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Record,::proto::Record>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRecordData() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::RecordData, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::RecordData, ::proto::Empty>* streamer) {
                       return this->StreamedCreateRecordData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRecordData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::RecordData,::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRecordData() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::RecordData, ::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::RecordData, ::proto::Empty>* streamer) {
                       return this->StreamedDeleteRecordData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordData* /*request*/, ::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRecordData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::RecordData,::proto::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_DeleteDevice<WithStreamedUnaryMethod_GetDevice<WithStreamedUnaryMethod_CreateSensor<WithStreamedUnaryMethod_UpdateSensor<WithStreamedUnaryMethod_DeleteSensor<WithStreamedUnaryMethod_GetSensor<WithStreamedUnaryMethod_CreateRecord<WithStreamedUnaryMethod_UpdateRecord<WithStreamedUnaryMethod_DeleteRecord<WithStreamedUnaryMethod_GetRecord<WithStreamedUnaryMethod_CreateRecordData<WithStreamedUnaryMethod_DeleteRecordData<Service > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetDevices() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::Empty, ::proto::Device>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::proto::Empty, ::proto::Device>* streamer) {
                       return this->StreamedGetDevices(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::proto::Empty* /*request*/, ::grpc::ServerWriter< ::proto::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDevices(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::Empty,::proto::Device>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetSensors() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::Device, ::proto::Sensor>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::proto::Device, ::proto::Sensor>* streamer) {
                       return this->StreamedGetSensors(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSensors(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Sensor>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetSensors(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::Device,::proto::Sensor>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRecords() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::Device, ::proto::Record>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::proto::Device, ::proto::Record>* streamer) {
                       return this->StreamedGetRecords(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRecords(::grpc::ServerContext* /*context*/, const ::proto::Device* /*request*/, ::grpc::ServerWriter< ::proto::Record>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRecords(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::Device,::proto::Record>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRecordData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRecordData() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::RecordDataFilter, ::proto::RecordData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::proto::RecordDataFilter, ::proto::RecordData>* streamer) {
                       return this->StreamedGetRecordData(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRecordData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRecordData(::grpc::ServerContext* /*context*/, const ::proto::RecordDataFilter* /*request*/, ::grpc::ServerWriter< ::proto::RecordData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRecordData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::RecordDataFilter,::proto::RecordData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetDevices<WithSplitStreamingMethod_GetSensors<WithSplitStreamingMethod_GetRecords<WithSplitStreamingMethod_GetRecordData<Service > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_DeleteDevice<WithStreamedUnaryMethod_GetDevice<WithSplitStreamingMethod_GetDevices<WithStreamedUnaryMethod_CreateSensor<WithStreamedUnaryMethod_UpdateSensor<WithStreamedUnaryMethod_DeleteSensor<WithStreamedUnaryMethod_GetSensor<WithSplitStreamingMethod_GetSensors<WithStreamedUnaryMethod_CreateRecord<WithStreamedUnaryMethod_UpdateRecord<WithStreamedUnaryMethod_DeleteRecord<WithStreamedUnaryMethod_GetRecord<WithSplitStreamingMethod_GetRecords<WithStreamedUnaryMethod_CreateRecordData<WithSplitStreamingMethod_GetRecordData<WithStreamedUnaryMethod_DeleteRecordData<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_IoT_2eproto__INCLUDED
