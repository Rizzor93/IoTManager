// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IoT.proto

#include "IoT.pb.h"
#include "IoT.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* IoTService_method_names[] = {
  "/proto.IoTService/CreateDevice",
  "/proto.IoTService/UpdateDevice",
  "/proto.IoTService/DeleteDevice",
  "/proto.IoTService/GetDevice",
  "/proto.IoTService/GetDevices",
  "/proto.IoTService/CreateSensor",
  "/proto.IoTService/UpdateSensor",
  "/proto.IoTService/DeleteSensor",
  "/proto.IoTService/GetSensor",
  "/proto.IoTService/GetSensors",
  "/proto.IoTService/CreateRecord",
  "/proto.IoTService/UpdateRecord",
  "/proto.IoTService/DeleteRecord",
  "/proto.IoTService/GetRecord",
  "/proto.IoTService/GetRecords",
  "/proto.IoTService/CreateRecordData",
  "/proto.IoTService/GetRecordData",
  "/proto.IoTService/DeleteRecordData",
};

std::unique_ptr< IoTService::Stub> IoTService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IoTService::Stub> stub(new IoTService::Stub(channel, options));
  return stub;
}

IoTService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateDevice_(IoTService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevice_(IoTService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDevice_(IoTService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevice_(IoTService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevices_(IoTService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateSensor_(IoTService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSensor_(IoTService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSensor_(IoTService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSensor_(IoTService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSensors_(IoTService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateRecord_(IoTService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRecord_(IoTService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRecord_(IoTService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecord_(IoTService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecords_(IoTService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateRecordData_(IoTService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecordData_(IoTService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteRecordData_(IoTService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IoTService::Stub::CreateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDevice_, context, request, response);
}

void IoTService::Stub::async::CreateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDevice_, context, request, response, std::move(f));
}

void IoTService::Stub::async::CreateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::UpdateDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDevice_, context, request, response);
}

void IoTService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, std::move(f));
}

void IoTService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::DeleteDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDevice_, context, request, response);
}

void IoTService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, std::move(f));
}

void IoTService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::GetDevice(::grpc::ClientContext* context, const ::proto::Device& request, ::proto::Device* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Device, ::proto::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevice_, context, request, response);
}

void IoTService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Device* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Device, ::proto::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, std::move(f));
}

void IoTService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::proto::Device* request, ::proto::Device* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Device>* IoTService::Stub::PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Device, ::proto::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Device>* IoTService::Stub::AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::proto::Device>* IoTService::Stub::GetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::proto::Device>::Create(channel_.get(), rpcmethod_GetDevices_, context, request);
}

void IoTService::Stub::async::GetDevices(::grpc::ClientContext* context, const ::proto::Empty* request, ::grpc::ClientReadReactor< ::proto::Device>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::proto::Device>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDevices_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::proto::Device>* IoTService::Stub::AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Device>::Create(channel_.get(), cq, rpcmethod_GetDevices_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::proto::Device>* IoTService::Stub::PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::proto::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Device>::Create(channel_.get(), cq, rpcmethod_GetDevices_, context, request, false, nullptr);
}

::grpc::Status IoTService::Stub::CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSensor_, context, request, response);
}

void IoTService::Stub::async::CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSensor_, context, request, response, std::move(f));
}

void IoTService::Stub::async::CreateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncCreateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Sensor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSensor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncCreateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSensorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSensor_, context, request, response);
}

void IoTService::Stub::async::UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSensor_, context, request, response, std::move(f));
}

void IoTService::Stub::async::UpdateSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncUpdateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Sensor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSensor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncUpdateSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSensorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSensor_, context, request, response);
}

void IoTService::Stub::async::DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSensor_, context, request, response, std::move(f));
}

void IoTService::Stub::async::DeleteSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncDeleteSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Sensor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSensor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncDeleteSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSensorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::GetSensor(::grpc::ClientContext* context, const ::proto::Sensor& request, ::proto::Sensor* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Sensor, ::proto::Sensor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSensor_, context, request, response);
}

void IoTService::Stub::async::GetSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Sensor* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Sensor, ::proto::Sensor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSensor_, context, request, response, std::move(f));
}

void IoTService::Stub::async::GetSensor(::grpc::ClientContext* context, const ::proto::Sensor* request, ::proto::Sensor* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Sensor>* IoTService::Stub::PrepareAsyncGetSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Sensor, ::proto::Sensor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSensor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Sensor>* IoTService::Stub::AsyncGetSensorRaw(::grpc::ClientContext* context, const ::proto::Sensor& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSensorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::proto::Sensor>* IoTService::Stub::GetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request) {
  return ::grpc::internal::ClientReaderFactory< ::proto::Sensor>::Create(channel_.get(), rpcmethod_GetSensors_, context, request);
}

void IoTService::Stub::async::GetSensors(::grpc::ClientContext* context, const ::proto::Device* request, ::grpc::ClientReadReactor< ::proto::Sensor>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::proto::Sensor>::Create(stub_->channel_.get(), stub_->rpcmethod_GetSensors_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::proto::Sensor>* IoTService::Stub::AsyncGetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Sensor>::Create(channel_.get(), cq, rpcmethod_GetSensors_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::proto::Sensor>* IoTService::Stub::PrepareAsyncGetSensorsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Sensor>::Create(channel_.get(), cq, rpcmethod_GetSensors_, context, request, false, nullptr);
}

::grpc::Status IoTService::Stub::CreateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRecord_, context, request, response);
}

void IoTService::Stub::async::CreateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRecord_, context, request, response, std::move(f));
}

void IoTService::Stub::async::CreateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncCreateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Record, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncCreateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::UpdateRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRecord_, context, request, response);
}

void IoTService::Stub::async::UpdateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRecord_, context, request, response, std::move(f));
}

void IoTService::Stub::async::UpdateRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncUpdateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Record, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncUpdateRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::DeleteRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRecord_, context, request, response);
}

void IoTService::Stub::async::DeleteRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRecord_, context, request, response, std::move(f));
}

void IoTService::Stub::async::DeleteRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::Record, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncDeleteRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IoTService::Stub::GetRecord(::grpc::ClientContext* context, const ::proto::Record& request, ::proto::Record* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::Record, ::proto::Record, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRecord_, context, request, response);
}

void IoTService::Stub::async::GetRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Record* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::Record, ::proto::Record, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, std::move(f));
}

void IoTService::Stub::async::GetRecord(::grpc::ClientContext* context, const ::proto::Record* request, ::proto::Record* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Record>* IoTService::Stub::PrepareAsyncGetRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Record, ::proto::Record, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Record>* IoTService::Stub::AsyncGetRecordRaw(::grpc::ClientContext* context, const ::proto::Record& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::proto::Record>* IoTService::Stub::GetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request) {
  return ::grpc::internal::ClientReaderFactory< ::proto::Record>::Create(channel_.get(), rpcmethod_GetRecords_, context, request);
}

void IoTService::Stub::async::GetRecords(::grpc::ClientContext* context, const ::proto::Device* request, ::grpc::ClientReadReactor< ::proto::Record>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::proto::Record>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecords_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::proto::Record>* IoTService::Stub::AsyncGetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Record>::Create(channel_.get(), cq, rpcmethod_GetRecords_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::proto::Record>* IoTService::Stub::PrepareAsyncGetRecordsRaw(::grpc::ClientContext* context, const ::proto::Device& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::Record>::Create(channel_.get(), cq, rpcmethod_GetRecords_, context, request, false, nullptr);
}

::grpc::Status IoTService::Stub::CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::RecordData, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRecordData_, context, request, response);
}

void IoTService::Stub::async::CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::RecordData, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRecordData_, context, request, response, std::move(f));
}

void IoTService::Stub::async::CreateRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRecordData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncCreateRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::RecordData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRecordData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncCreateRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRecordDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::proto::RecordData>* IoTService::Stub::GetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request) {
  return ::grpc::internal::ClientReaderFactory< ::proto::RecordData>::Create(channel_.get(), rpcmethod_GetRecordData_, context, request);
}

void IoTService::Stub::async::GetRecordData(::grpc::ClientContext* context, const ::proto::RecordDataFilter* request, ::grpc::ClientReadReactor< ::proto::RecordData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::proto::RecordData>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecordData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::proto::RecordData>* IoTService::Stub::AsyncGetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::RecordData>::Create(channel_.get(), cq, rpcmethod_GetRecordData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::proto::RecordData>* IoTService::Stub::PrepareAsyncGetRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordDataFilter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::RecordData>::Create(channel_.get(), cq, rpcmethod_GetRecordData_, context, request, false, nullptr);
}

::grpc::Status IoTService::Stub::DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData& request, ::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::RecordData, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRecordData_, context, request, response);
}

void IoTService::Stub::async::DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::RecordData, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRecordData_, context, request, response, std::move(f));
}

void IoTService::Stub::async::DeleteRecordData(::grpc::ClientContext* context, const ::proto::RecordData* request, ::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRecordData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::PrepareAsyncDeleteRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Empty, ::proto::RecordData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRecordData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Empty>* IoTService::Stub::AsyncDeleteRecordDataRaw(::grpc::ClientContext* context, const ::proto::RecordData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRecordDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

IoTService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Device* req,
             ::proto::Empty* resp) {
               return service->CreateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Device* req,
             ::proto::Empty* resp) {
               return service->UpdateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Device, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Device* req,
             ::proto::Empty* resp) {
               return service->DeleteDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Device, ::proto::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Device* req,
             ::proto::Device* resp) {
               return service->GetDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IoTService::Service, ::proto::Empty, ::proto::Device>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Empty* req,
             ::grpc::ServerWriter<::proto::Device>* writer) {
               return service->GetDevices(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Sensor* req,
             ::proto::Empty* resp) {
               return service->CreateSensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Sensor* req,
             ::proto::Empty* resp) {
               return service->UpdateSensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Sensor, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Sensor* req,
             ::proto::Empty* resp) {
               return service->DeleteSensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Sensor, ::proto::Sensor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Sensor* req,
             ::proto::Sensor* resp) {
               return service->GetSensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IoTService::Service, ::proto::Device, ::proto::Sensor>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Device* req,
             ::grpc::ServerWriter<::proto::Sensor>* writer) {
               return service->GetSensors(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Record* req,
             ::proto::Empty* resp) {
               return service->CreateRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Record* req,
             ::proto::Empty* resp) {
               return service->UpdateRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Record, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Record* req,
             ::proto::Empty* resp) {
               return service->DeleteRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::Record, ::proto::Record, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Record* req,
             ::proto::Record* resp) {
               return service->GetRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IoTService::Service, ::proto::Device, ::proto::Record>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::Device* req,
             ::grpc::ServerWriter<::proto::Record>* writer) {
               return service->GetRecords(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::RecordData, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::RecordData* req,
             ::proto::Empty* resp) {
               return service->CreateRecordData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[16],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IoTService::Service, ::proto::RecordDataFilter, ::proto::RecordData>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::RecordDataFilter* req,
             ::grpc::ServerWriter<::proto::RecordData>* writer) {
               return service->GetRecordData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IoTService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IoTService::Service, ::proto::RecordData, ::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IoTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::RecordData* req,
             ::proto::Empty* resp) {
               return service->DeleteRecordData(ctx, req, resp);
             }, this)));
}

IoTService::Service::~Service() {
}

::grpc::Status IoTService::Service::CreateDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::UpdateDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::DeleteDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::GetDevice(::grpc::ServerContext* context, const ::proto::Device* request, ::proto::Device* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::GetDevices(::grpc::ServerContext* context, const ::proto::Empty* request, ::grpc::ServerWriter< ::proto::Device>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::CreateSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::UpdateSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::DeleteSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::GetSensor(::grpc::ServerContext* context, const ::proto::Sensor* request, ::proto::Sensor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::GetSensors(::grpc::ServerContext* context, const ::proto::Device* request, ::grpc::ServerWriter< ::proto::Sensor>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::CreateRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::UpdateRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::DeleteRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::GetRecord(::grpc::ServerContext* context, const ::proto::Record* request, ::proto::Record* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::GetRecords(::grpc::ServerContext* context, const ::proto::Device* request, ::grpc::ServerWriter< ::proto::Record>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::CreateRecordData(::grpc::ServerContext* context, const ::proto::RecordData* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::GetRecordData(::grpc::ServerContext* context, const ::proto::RecordDataFilter* request, ::grpc::ServerWriter< ::proto::RecordData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IoTService::Service::DeleteRecordData(::grpc::ServerContext* context, const ::proto::RecordData* request, ::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

